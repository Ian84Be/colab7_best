// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Question {
  id         Int       @id @default(autoincrement())
  authorId   Int?
  author     User?     @relation(fields: [authorId], references: [id])
  foodId     Int?
  food       Food?     @relation(fields: [foodId], references: [id])
  occasionId Int?
  occasion   Occasion? @relation(fields: [occasionId], references: [id])
  message    String?
  location   String?
  contacts   Json?
  createdAt  DateTime  @default(now()) @map("created_at")
  expires    DateTime?
  slug       String?
  Answer     Answer[]

  @@map("questions")
}

model Answer {
  id         Int      @id @default(autoincrement())
  userId     Int?
  answer     String
  comment    String?
  questionId Int
  question   Question @relation(fields: [questionId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")

  @@map("answers")
}

model Occasion {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("occasions")
  Question Question[]
}

model Food {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  @@map("foods")
  Question Question[]
}

model User {
  id            Int        @id @default(autoincrement())
  name          String?
  email         String?    @unique
  emailVerified Boolean?   @default(false) @map("verified_email")
  image         String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")
  questions     Question[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                 Int      @id @default(autoincrement())
  userId             Int?     @map("user_id")
  user               User?    @relation(fields: [userId], references: [id])
  compoundId         String?  @map("compound_id")
  providerType       String   @map("provider_type")
  providerId         String   @map("provider_id")
  providerAccountId  String   @map("provider_account_id")
  refreshToken       String?  @map("refresh_token")
  accessToken        String?  @map("access_token")
  accessTokenExpires String?  @map("access_token_expires")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @default(now()) @map("updated_at")

  @@unique([providerId, providerAccountId])
  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  user         User     @relation(fields: [userId], references: [id])
  expires      DateTime
  sessionToken String   @unique @map("session_token")
  accessToken  String   @unique @map("access_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")

  @@map("sessions")
}
